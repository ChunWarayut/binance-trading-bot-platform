#!/bin/bash

echo "üê≥ DOCKER TESTING SCRIPT"
echo "========================"

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
PYTHON_IMAGE="python:3.11-slim"
WORKSPACE="/workspace"

echo "üìã ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ô:"
echo "1. quick_winrate_test.py - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Win Rate"
echo "2. win_rate_optimizer.py - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Win Rate"
echo "3. manual_test_backtest.py - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Backtest"
echo "4. performance_analyzer.py - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"
echo ""

# Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô Docker
run_test_in_docker() {
    local script_name=$1
    local description=$2
    local timeout=${3:-300}  # default 5 minutes
    
    echo "üöÄ ‡∏£‡∏±‡∏ô: $script_name - $description"
    echo "‚è±Ô∏è Timeout: ${timeout} seconds"
    echo "================================"
    
    docker run -it --rm \
        -v "$(pwd):$WORKSPACE" \
        -w $WORKSPACE \
        $PYTHON_IMAGE \
        timeout $timeout bash -c "
            echo 'üì¶ Installing requirements...'
            pip install --no-cache-dir -r requirements.txt > /dev/null 2>&1
            echo '‚úÖ Requirements installed'
            echo ''
            echo 'üîß Running $script_name...'
            python $script_name
        "
    
    local exit_code=$?
    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $script_name"
    elif [ $exit_code -eq 124 ]; then
        echo "‚è∞ Timeout: $script_name (‡πÄ‡∏Å‡∏¥‡∏ô ${timeout} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)"
    else
        echo "‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $script_name (exit code: $exit_code)"
    fi
    echo "================================"
    echo ""
}

# Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô backtest ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß
run_quick_backtest() {
    echo "üöÄ ‡∏£‡∏±‡∏ô: Quick Backtest (7 ‡∏ß‡∏±‡∏ô)"
    echo "================================"
    
    docker run -it --rm \
        -v "$(pwd):$WORKSPACE" \
        -w $WORKSPACE \
        $PYTHON_IMAGE \
        timeout 600 bash -c "
            echo 'üì¶ Installing requirements...'
            pip install --no-cache-dir -r requirements.txt > /dev/null 2>&1
            echo '‚úÖ Requirements installed'
            echo ''
            echo 'üîß Running Quick Backtest...'
            python -c \"
import sys
sys.path.append('.')
from backtest import run_backtest
from datetime import datetime, timedelta
import pandas as pd

# Quick backtest - 7 days only
end_date = datetime.now()
start_date = end_date - timedelta(days=7)

print(f'üìÖ Testing period: {start_date.strftime(\"%Y-%m-%d\")} to {end_date.strftime(\"%Y-%m-%d\")}')
print('üí∞ Initial balance: \$1000')
print('üéØ Target: Win Rate > 55%')
print('')

try:
    result = run_backtest(
        start_date=start_date.strftime('%Y-%m-%d'),
        end_date=end_date.strftime('%Y-%m-%d'),
        initial_balance=1000,
        symbols=['BTCUSDT', 'ETHUSDT', 'BNBUSDT'],
        interval='1h'
    )
    
    if result:
        print('‚úÖ Quick Backtest completed successfully')
    else:
        print('‚ùå Quick Backtest failed')
        
except Exception as e:
    print(f'‚ùå Error in Quick Backtest: {e}')
\"
        "
    
    local exit_code=$?
    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: Quick Backtest"
    elif [ $exit_code -eq 124 ]; then
        echo "‚è∞ Timeout: Quick Backtest (‡πÄ‡∏Å‡∏¥‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ)"
    else
        echo "‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: Quick Backtest (exit code: $exit_code)"
    fi
    echo "================================"
    echo ""
}

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
echo "üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö..."
echo ""

# 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Win Rate (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 5-10 ‡∏ô‡∏≤‡∏ó‡∏µ)
run_test_in_docker "quick_winrate_test.py" "‡∏ó‡∏î‡∏™‡∏≠‡∏ö Win Rate" 600

# 2. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Win Rate (‡∏´‡∏≤‡∏Å Win Rate < 55%)
echo "ü§î ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Win Rate ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n)"
echo "‡∏´‡∏≤‡∏Å Win Rate < 55% ‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏ô win_rate_optimizer.py"
run_test_in_docker "win_rate_optimizer.py" "‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Win Rate" 300

# 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Backtest ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
run_test_in_docker "manual_test_backtest.py" "‡∏ó‡∏î‡∏™‡∏≠‡∏ö Backtest ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô" 300

# 4. Quick Backtest
run_quick_backtest

# 5. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
run_test_in_docker "performance_analyzer.py" "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå" 180

echo "üéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!"
echo ""
echo "üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:"
echo "- ‡∏´‡∏≤‡∏Å Win Rate > 55% = ‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
echo "- ‡∏´‡∏≤‡∏Å Win Rate < 55% = ‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
echo ""
echo "üöÄ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:"
echo "1. ‡∏´‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏î‡∏µ ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô full backtest:"
echo "   docker run --rm -v \$(pwd):/workspace -w /workspace python:3.11-slim bash -c 'pip install -r requirements.txt && python backtest.py'"
echo ""
echo "2. ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ deploy:"
echo "   docker-compose up -d"
echo ""
echo "3. ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ monitor:"
echo "   docker-compose logs -f trading-bot" 