#!/usr/bin/env python3
"""
Performance Analyzer - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå trading bot ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
"""

import json
import pandas as pd
import numpy as np
from datetime import datetime
import os

class PerformanceAnalyzer:
    def __init__(self):
        self.performance_thresholds = {
            'win_rate': {
                'excellent': 60,
                'very_good': 55,
                'good': 50,
                'average': 45,
                'poor': 0
            },
            'profit_factor': {
                'excellent': 2.0,
                'very_good': 1.5,
                'good': 1.2,
                'average': 1.0,
                'poor': 0
            },
            'max_drawdown': {
                'excellent': 10,
                'very_good': 15,
                'good': 20,
                'average': 30,
                'poor': 100
            },
            'sharpe_ratio': {
                'excellent': 2.0,
                'very_good': 1.5,
                'good': 1.0,
                'average': 0.5,
                'poor': 0
            }
        }
    
    def load_backtest_results(self, file_path='backtest_report.json'):
        """‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå backtest"""
        try:
            if os.path.exists(file_path):
                with open(file_path, 'r') as f:
                    return json.load(f)
            else:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {file_path}")
                return None
        except Exception as e:
            print(f"‚ùå Error loading results: {e}")
            return None
    
    def evaluate_metric(self, value, metric_name, reverse=False):
        """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤ metric"""
        thresholds = self.performance_thresholds[metric_name]
        
        if reverse:  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö drawdown (‡∏¢‡∏¥‡πà‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ)
            if value <= thresholds['excellent']:
                return 'excellent', 'üèÜ'
            elif value <= thresholds['very_good']:
                return 'very_good', '‚úÖ'
            elif value <= thresholds['good']:
                return 'good', 'üëç'
            elif value <= thresholds['average']:
                return 'average', '‚ö†Ô∏è'
            else:
                return 'poor', '‚ùå'
        else:  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö metrics ‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏¢‡∏¥‡πà‡∏á‡∏°‡∏≤‡∏Å‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ)
            if value >= thresholds['excellent']:
                return 'excellent', 'üèÜ'
            elif value >= thresholds['very_good']:
                return 'very_good', '‚úÖ'
            elif value >= thresholds['good']:
                return 'good', 'üëç'
            elif value >= thresholds['average']:
                return 'average', '‚ö†Ô∏è'
            else:
                return 'poor', '‚ùå'
    
    def analyze_performance(self, results):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå performance ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        if not results:
            return None
        
        analysis = {
            'overall_score': 0,
            'metrics': {},
            'strengths': [],
            'weaknesses': [],
            'recommendations': []
        }
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞ metric
        metrics_to_analyze = [
            ('win_rate_pct', 'win_rate', False),
            ('profit_factor', 'profit_factor', False),
            ('max_drawdown_pct', 'max_drawdown', True),
            ('sharpe_ratio', 'sharpe_ratio', False)
        ]
        
        total_score = 0
        metric_count = 0
        
        for result_key, threshold_key, reverse in metrics_to_analyze:
            if result_key in results:
                value = results[result_key]
                rating, emoji = self.evaluate_metric(value, threshold_key, reverse)
                
                analysis['metrics'][result_key] = {
                    'value': value,
                    'rating': rating,
                    'emoji': emoji
                }
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                score_map = {'excellent': 5, 'very_good': 4, 'good': 3, 'average': 2, 'poor': 1}
                total_score += score_map[rating]
                metric_count += 1
                
                # ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô
                if rating in ['excellent', 'very_good']:
                    analysis['strengths'].append(f"{result_key}: {value:.2f} {emoji}")
                elif rating == 'poor':
                    analysis['weaknesses'].append(f"{result_key}: {value:.2f} {emoji}")
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
        if metric_count > 0:
            analysis['overall_score'] = (total_score / (metric_count * 5)) * 100
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        analysis['recommendations'] = self.generate_recommendations(analysis['metrics'], results)
        
        return analysis
    
    def generate_recommendations(self, metrics, results):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"""
        recommendations = []
        
        # Win Rate
        if 'win_rate_pct' in metrics:
            win_rate = metrics['win_rate_pct']['value']
            if win_rate < 50:
                recommendations.append("üéØ ‡∏õ‡∏£‡∏±‡∏ö strategy weights ‡πÉ‡∏´‡πâ‡πÄ‡∏ô‡πâ‡∏ô conservative strategies")
                recommendations.append("üìä ‡πÄ‡∏û‡∏¥‡πà‡∏° confirmation signals ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ trade")
                recommendations.append("‚è∞ ‡πÉ‡∏ä‡πâ multiple timeframe analysis")
        
        # Profit Factor
        if 'profit_factor' in metrics:
            pf = metrics['profit_factor']['value']
            if pf < 1.2:
                recommendations.append("üí∞ ‡∏õ‡∏£‡∏±‡∏ö take-profit levels ‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô")
                recommendations.append("üõë ‡πÄ‡∏û‡∏¥‡πà‡∏° stop-loss ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢")
                recommendations.append("üìà ‡πÄ‡∏ô‡πâ‡∏ô trend-following strategies")
        
        # Max Drawdown
        if 'max_drawdown_pct' in metrics:
            dd = metrics['max_drawdown_pct']['value']
            if dd > 20:
                recommendations.append("üîí ‡∏•‡∏î position size (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô 10% ‚Üí 5%)")
                recommendations.append("‚ö° ‡πÄ‡∏û‡∏¥‡πà‡∏° emergency exit conditions")
                recommendations.append("üéöÔ∏è ‡∏õ‡∏£‡∏±‡∏ö risk management parameters")
        
        # Sharpe Ratio
        if 'sharpe_ratio' in metrics:
            sr = metrics['sharpe_ratio']['value']
            if sr < 1.0:
                recommendations.append("üìâ ‡∏õ‡∏£‡∏±‡∏ö portfolio diversification")
                recommendations.append("‚è±Ô∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô trading frequency")
                recommendations.append("üéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å symbols ‡∏ó‡∏µ‡πà‡∏°‡∏µ volatility ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
        
        # Strategy-specific recommendations
        if 'strategy_performance' in results:
            strategy_perf = results['strategy_performance']
            best_strategies = []
            worst_strategies = []
            
            for strategy, perf in strategy_perf.items():
                if perf['win_rate'] > 65:
                    best_strategies.append(strategy)
                elif perf['win_rate'] < 40:
                    worst_strategies.append(strategy)
            
            if best_strategies:
                recommendations.append(f"‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° weight ‡πÉ‡∏´‡πâ strategies ‡∏ó‡∏µ‡πà‡∏î‡∏µ: {', '.join(best_strategies)}")
            
            if worst_strategies:
                recommendations.append(f"üîª ‡∏•‡∏î weight ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏¥‡∏î strategies ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡πà: {', '.join(worst_strategies)}")
        
        return recommendations
    
    def print_analysis(self, analysis):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        if not analysis:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå")
            return
        
        print("üìä PERFORMANCE ANALYSIS REPORT")
        print("=" * 50)
        
        # Overall Score
        score = analysis['overall_score']
        if score >= 80:
            score_emoji = "üèÜ"
            score_text = "‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°"
        elif score >= 70:
            score_emoji = "‚úÖ"
            score_text = "‡∏î‡∏µ‡∏°‡∏≤‡∏Å"
        elif score >= 60:
            score_emoji = "üëç"
            score_text = "‡∏î‡∏µ"
        elif score >= 50:
            score_emoji = "‚ö†Ô∏è"
            score_text = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
        else:
            score_emoji = "‚ùå"
            score_text = "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"
        
        print(f"üéØ Overall Score: {score:.1f}/100 {score_emoji} ({score_text})")
        print()
        
        # Detailed Metrics
        print("üìà DETAILED METRICS:")
        for metric, data in analysis['metrics'].items():
            print(f"  ‚Ä¢ {metric}: {data['value']:.2f} {data['emoji']} ({data['rating']})")
        print()
        
        # Strengths
        if analysis['strengths']:
            print("üí™ STRENGTHS:")
            for strength in analysis['strengths']:
                print(f"  ‚Ä¢ {strength}")
            print()
        
        # Weaknesses
        if analysis['weaknesses']:
            print("‚ö†Ô∏è WEAKNESSES:")
            for weakness in analysis['weaknesses']:
                print(f"  ‚Ä¢ {weakness}")
            print()
        
        # Recommendations
        if analysis['recommendations']:
            print("üîß RECOMMENDATIONS:")
            for i, rec in enumerate(analysis['recommendations'], 1):
                print(f"  {i}. {rec}")
            print()
    
    def generate_improvement_config(self, analysis, results):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á config ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
        try:
            # ‡πÇ‡∏´‡∏•‡∏î config ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            with open('strategy_config.json', 'r') as f:
                config = json.load(f)
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏≤‡∏° recommendations
            if 'max_drawdown_pct' in analysis['metrics']:
                if analysis['metrics']['max_drawdown_pct']['rating'] == 'poor':
                    # ‡∏•‡∏î confidence threshold
                    config['signal_thresholds']['confidence_threshold'] = 0.5
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏° consensus threshold
                    config['signal_thresholds']['consensus_threshold'] = 4
            
            if 'win_rate_pct' in analysis['metrics']:
                if analysis['metrics']['win_rate_pct']['value'] < 50:
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏° strength threshold
                    config['signal_thresholds']['strength_threshold'] = 60
                    # ‡∏õ‡∏£‡∏±‡∏ö volume thresholds
                    config['volume_analysis']['volume_spike_threshold'] = 1.8
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config ‡πÉ‡∏´‡∏°‡πà
            with open('strategy_config_improved.json', 'w') as f:
                json.dump(config, f, indent=2)
            
            print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á strategy_config_improved.json ‡πÅ‡∏•‡πâ‡∏ß")
            return config
            
        except Exception as e:
            print(f"‚ùå Error generating improved config: {e}")
            return None

def main():
    """Main function"""
    print("üß™ TRADING BOT PERFORMANCE ANALYZER")
    print("=" * 50)
    
    analyzer = PerformanceAnalyzer()
    
    # ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå backtest
    results = analyzer.load_backtest_results()
    
    if results:
        print("‚úÖ ‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå backtest")
        analysis = analyzer.analyze_performance(results)
        analyzer.print_analysis(analysis)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á improved config
        analyzer.generate_improvement_config(analysis, results)
        
    else:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå backtest")
        print("üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
        print("1. ‡∏£‡∏±‡∏ô backtest ‡∏Å‡πà‡∏≠‡∏ô: python backtest.py")
        print("2. ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏£‡∏±‡∏ô analyzer: python performance_analyzer.py")
        print()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        print("üìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô:")
        print("Win Rate:")
        print("  üèÜ > 60% = ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°")
        print("  ‚úÖ 55-60% = ‡∏î‡∏µ‡∏°‡∏≤‡∏Å") 
        print("  üëç 50-55% = ‡∏î‡∏µ")
        print("  ‚ö†Ô∏è 45-50% = ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á")
        print("  ‚ùå < 45% = ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á")

if __name__ == "__main__":
    main() 