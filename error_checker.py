#!/usr/bin/env python3
"""
Error Checker - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç error ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
"""

import os
import sys
import ast
import json
import importlib.util

def check_python_syntax(filename):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö syntax ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå Python"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            content = f.read()
        
        ast.parse(content)
        return True, "‚úÖ Syntax ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
    except SyntaxError as e:
        return False, f"‚ùå Syntax Error: {e}"
    except Exception as e:
        return False, f"‚ùå Error: {e}"

def check_imports(filename):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö imports ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå"""
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            content = f.read()
        
        tree = ast.parse(content)
        imports = []
        
        for node in ast.walk(tree):
            if isinstance(node, ast.Import):
                for alias in node.names:
                    imports.append(alias.name)
            elif isinstance(node, ast.ImportFrom):
                if node.module:
                    imports.append(node.module)
        
        missing_modules = []
        for module in imports:
            try:
                if importlib.util.find_spec(module) is None:
                    missing_modules.append(module)
            except:
                missing_modules.append(module)
        
        if missing_modules:
            return False, f"‚ùå Missing modules: {missing_modules}"
        else:
            return True, "‚úÖ All imports available"
            
    except Exception as e:
        return False, f"‚ùå Error checking imports: {e}"

def check_json_files():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå JSON"""
    json_files = ['bot_config.json', 'strategy_config.json']
    results = {}
    
    for filename in json_files:
        if os.path.exists(filename):
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    json.load(f)
                results[filename] = "‚úÖ Valid JSON"
            except json.JSONDecodeError as e:
                results[filename] = f"‚ùå Invalid JSON: {e}"
            except Exception as e:
                results[filename] = f"‚ùå Error: {e}"
        else:
            results[filename] = "‚ö†Ô∏è File not found"
    
    return results

def check_permissions():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permissions ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå"""
    python_files = [f for f in os.listdir('.') if f.endswith('.py')]
    results = {}
    
    for filename in python_files:
        if os.path.exists(filename):
            if os.access(filename, os.R_OK):
                results[filename] = "‚úÖ Readable"
            else:
                results[filename] = "‚ùå Not readable"
        else:
            results[filename] = "‚ö†Ô∏è File not found"
    
    return results

def fix_common_issues():
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"""
    fixes = []
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á __pycache__ directory
    if not os.path.exists('__pycache__'):
        try:
            os.makedirs('__pycache__')
            fixes.append("‚úÖ Created __pycache__ directory")
        except:
            fixes.append("‚ùå Cannot create __pycache__ directory")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á logs directory
    if not os.path.exists('logs'):
        try:
            os.makedirs('logs')
            fixes.append("‚úÖ Created logs directory")
        except:
            fixes.append("‚ùå Cannot create logs directory")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö requirements.txt
    if os.path.exists('requirements.txt'):
        fixes.append("‚úÖ requirements.txt exists")
    else:
        fixes.append("‚ö†Ô∏è requirements.txt not found")
    
    return fixes

def main():
    """Main function"""
    print("üîç ERROR CHECKER & DIAGNOSTIC TOOL")
    print("=" * 50)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Python version
    print(f"üêç Python Version: {sys.version}")
    print(f"üìÅ Current Directory: {os.getcwd()}")
    print()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
    main_files = [
        'quick_winrate_test.py',
        'win_rate_optimizer.py',
        'performance_analyzer.py',
        'manual_test_backtest.py',
        'backtest.py',
        'trading_bot.py'
    ]
    
    print("üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å:")
    for filename in main_files:
        if os.path.exists(filename):
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö syntax
            syntax_ok, syntax_msg = check_python_syntax(filename)
            print(f"  {filename}: {syntax_msg}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö imports (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà syntax ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
            if syntax_ok:
                import_ok, import_msg = check_imports(filename)
                if not import_ok:
                    print(f"    {import_msg}")
        else:
            print(f"  {filename}: ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå")
    
    print()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå JSON
    print("üìÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå JSON:")
    json_results = check_json_files()
    for filename, result in json_results.items():
        print(f"  {filename}: {result}")
    
    print()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permissions
    print("üîí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Permissions:")
    perm_results = check_permissions()
    for filename, result in perm_results.items():
        if "‚ùå" in result:
            print(f"  {filename}: {result}")
    
    print()
    
    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    print("üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:")
    fixes = fix_common_issues()
    for fix in fixes:
        print(f"  {fix}")
    
    print()
    
    # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
    print("üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
    print("1. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Syntax Error ‚Üí ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏±‡πâ‡∏ô")
    print("2. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Import Error ‚Üí ‡∏£‡∏±‡∏ô: pip install -r requirements.txt")
    print("3. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ JSON Error ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö syntax ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .json")
    print("4. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Permission Error ‚Üí ‡∏£‡∏±‡∏ô: chmod +r *.py")
    print("5. ‡∏ñ‡πâ‡∏≤ terminal ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‚Üí ‡πÉ‡∏ä‡πâ Docker: docker-compose exec trading-bot python [script]")
    
    print()
    print("üöÄ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô:")
    print("  python quick_start.py")
    print("  ‡∏´‡∏£‡∏∑‡∏≠ python3 quick_start.py")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"‚ùå Error in error checker: {e}")
        import traceback
        traceback.print_exc() 