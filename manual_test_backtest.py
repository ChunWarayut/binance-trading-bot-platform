#!/usr/bin/env python3
"""
Manual Backtest Test - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö backtest ‡πÅ‡∏ö‡∏ö manual
‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: python manual_test_backtest.py
"""

print("üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Enhanced Backtest Engine")
print("=" * 50)

# Test 1: Import modules
print("üì¶ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ import modules...")
try:
    from backtest import BacktestEngine
    from trading_bot import TradingBot
    print("‚úÖ Import modules ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
except Exception as e:
    print(f"‚ùå Import error: {e}")
    exit(1)

# Test 2: Create BacktestEngine
print("\nüèóÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á BacktestEngine...")
try:
    engine = BacktestEngine('2024-01-01', '2024-01-03', 1000)
    print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á BacktestEngine ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    print(f"üìÖ Period: {engine.start_date.date()} to {engine.end_date.date()}")
    print(f"üí∞ Initial balance: ${engine.initial_balance:,.2f}")
except Exception as e:
    print(f"‚ùå Error creating BacktestEngine: {e}")
    exit(1)

# Test 3: Test signal functions with dummy data
print("\nüìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Signal Functions...")
try:
    import pandas as pd
    import numpy as np
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö 100 candles
    np.random.seed(42)  # ‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
    dates = pd.date_range('2024-01-01', periods=100, freq='1H')
    
    df = pd.DataFrame({
        'timestamp': dates,
        'open': 45000 + np.random.normal(0, 1000, 100).cumsum(),
        'high': 45000 + np.random.normal(500, 1000, 100).cumsum(),
        'low': 45000 + np.random.normal(-500, 1000, 100).cumsum(),
        'close': 45000 + np.random.normal(0, 1000, 100).cumsum(),
        'volume': np.random.uniform(100, 1000, 100)
    })
    
    # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ high >= max(open, close) ‡πÅ‡∏•‡∏∞ low <= min(open, close)
    df['high'] = np.maximum(df['high'], np.maximum(df['open'], df['close']))
    df['low'] = np.minimum(df['low'], np.minimum(df['open'], df['close']))
    
    print(f"üìà ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö {len(df)} candles")
    print(f"üíπ Price range: ${df['low'].min():,.0f} - ${df['high'].max():,.0f}")
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì indicators
    df = engine.calculate_indicators(df)
    print("‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì indicators ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö signals
    current_price = float(df['close'].iloc[-1])
    signals = engine.get_all_signals(df, current_price)
    
    print("‚úÖ Signal functions ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
    print(f"üìä Total signals: {len(signals)}")
    
    # ‡∏ô‡∏±‡∏ö signals ‡∏ó‡∏µ‡πà active
    buy_signals = sum(1 for s in signals.values() if s == "BUY")
    sell_signals = sum(1 for s in signals.values() if s == "SELL")
    none_signals = sum(1 for s in signals.values() if s is None)
    
    print(f"üü¢ BUY signals: {buy_signals}")
    print(f"üî¥ SELL signals: {sell_signals}")
    print(f"‚ö™ None signals: {none_signals}")
    
    # ‡πÅ‡∏™‡∏î‡∏á active signals
    active_signals = {k: v for k, v in signals.items() if v is not None}
    if active_signals:
        print("üéØ Active signals:")
        for name, signal in active_signals.items():
            print(f"  ‚Ä¢ {name}: {signal}")
    else:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ active signals")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö determine_trade_signal
    final_signal, strategy = engine.determine_trade_signal(signals)
    print(f"üéØ Final signal: {final_signal} ({strategy})")
    
except Exception as e:
    print(f"‚ùå Signal test error: {e}")
    import traceback
    traceback.print_exc()
    exit(1)

print("\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!")
print("‚úÖ Backtest engine ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")

print("\n" + "=" * 50)
print("üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠:")
print("1. ‡∏£‡∏±‡∏ô full backtest: python backtest.py")
print("2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö strategies: python test_enhanced_strategies.py")
print("3. ‡∏£‡∏±‡∏ô bot ‡∏à‡∏£‡∏¥‡∏á: python main.py")
print("4. ‡∏î‡∏π web UI: python web_ui.py")
print("=" * 50) 