#!/usr/bin/env python3
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç Multi-Timeframe
"""

import asyncio
import json
import time
from trading_bot import TradingBot
from coin_analysis import CoinAnalyzer
from binance.client import Client
import config

async def test_multi_timeframe_analysis():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Multi-Timeframe"""
    print("ü™ô ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Multi-Timeframe...")
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á bot instance
        bot = TradingBot()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏ö‡∏ö Multi-Timeframe
        print("\nüìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Multi-Timeframe ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö BTCUSDT...")
        analysis = await bot.coin_analyzer.analyze_coin_multi_tf("BTCUSDT")
        
        if analysis:
            print(f"‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå BTCUSDT ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            print(f"   ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {analysis['current_price']:.2f} USDT")
            print(f"   ‡∏Ç‡∏ô‡∏≤‡∏î Order: {analysis['categories']['order_size']}")
            print(f"   Leverage: {analysis['categories']['leverage']}")
            print(f"   Position Size Multiplier: {analysis['recommendations']['position_size_multiplier']}")
            print(f"   Recommended Leverage: {analysis['recommendations']['leverage']['recommended']}x")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Weighted Metrics
            print(f"\nüìà Weighted Metrics (‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ñ‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å):")
            weighted = analysis['weighted_metrics']
            print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô: {weighted['volatility']:.2f}%")
            print(f"   ‡∏™‡∏†‡∏≤‡∏û‡∏Ñ‡∏•‡πà‡∏≠‡∏á: {weighted['liquidity_score']:.1f}/100")
            print(f"   ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {weighted['volume_profile']['avg_volume']:,.0f}")
            print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå: {weighted['trend_strength']:.1f}/100")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ Timeframe
            print(f"\n‚è∞ Timeframe Analysis:")
            tf_analysis = analysis['timeframe_analysis']
            
            timeframes = ['1m', '5m', '15m', '1h', '4h', '1d']
            for tf in timeframes:
                if tf in tf_analysis['volatility']:
                    vol = tf_analysis['volatility'][tf]
                    liq = tf_analysis['liquidity_score'][tf]
                    trend = tf_analysis['trend_strength'][tf]
                    print(f"   {tf:>4}: Vol={vol:5.2f}%, Liq={liq:5.1f}, Trend={trend:6.1f}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
            notes = analysis['recommendations']['notes']
            if notes:
                print(f"\nüìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:")
                for note in notes:
                    print(f"   {note}")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå BTCUSDT ‡πÑ‡∏î‡πâ")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏ô
        print(f"\nüîÑ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏ô...")
        start_time = time.time()
        
        analyses = await bot.coin_analyzer.analyze_all_coins(config.TRADING_PAIRS[:5])  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏Ñ‡πà 5 ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
        
        end_time = time.time()
        duration = end_time - start_time
        
        if analyses:
            print(f"‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {len(analyses)} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ {duration:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            print(f"\nüìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:")
            for symbol, analysis in analyses.items():
                order_size = analysis['categories']['order_size']
                leverage = analysis['categories']['leverage']
                multiplier = analysis['recommendations']['position_size_multiplier']
                recommended_leverage = analysis['recommendations']['leverage']['recommended']
                trend_strength = analysis['weighted_metrics']['trend_strength']
                
                print(f"   {symbol}: {order_size} size, {leverage} leverage ({multiplier:.1f}x, {recommended_leverage}x, Trend: {trend_strength:.1f})")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ
            print(f"\nüìã ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ:")
            summary = bot.coin_analyzer.get_summary_report(analyses)
            print(summary)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            filename = f"multi_tf_analysis_{timestamp}.json"
            
            with open(filename, "w", encoding="utf-8") as f:
                json.dump(analyses, f, indent=2, ensure_ascii=False)
            
            print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå: {filename}")
            
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏î‡πâ")
        
        print("\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Multi-Timeframe ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {e}")

async def test_timeframe_comparison():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Timeframe ‡∏ï‡πà‡∏≤‡∏á‡πÜ"""
    print("\nüî¨ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Timeframe...")
    
    try:
        client = Client(config.BINANCE_API_KEY, config.BINANCE_API_SECRET)
        analyzer = CoinAnalyzer(client)
        
        test_symbol = "ETHUSDT"
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢ Timeframe
        timeframe_data = await analyzer.get_market_data_parallel(test_symbol)
        
        if timeframe_data:
            print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢ Timeframe ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {test_symbol} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ Timeframe
            volatility_multi = analyzer.calculate_volatility_multi_tf(timeframe_data)
            liquidity_multi = analyzer.calculate_liquidity_score_multi_tf(timeframe_data)
            trend_multi = analyzer.calculate_trend_strength_multi_tf(timeframe_data)
            
            print(f"\nüìä ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Timeframe:")
            print(f"{'Timeframe':>6} {'Volatility':>10} {'Liquidity':>10} {'Trend':>8}")
            print("-" * 40)
            
            timeframes = ['1m', '5m', '15m', '1h', '4h', '1d']
            for tf in timeframes:
                if tf in timeframe_data and not timeframe_data[tf].empty:
                    vol = volatility_multi.get(tf, 0)
                    liq = liquidity_multi.get(tf, 0)
                    trend = trend_multi.get(tf, 0)
                    print(f"{tf:>6} {vol:>10.2f} {liq:>10.1f} {trend:>8.1f}")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ñ‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
            tf_weights = {
                '1m': 0.05, '5m': 0.1, '15m': 0.15, 
                '1h': 0.25, '4h': 0.25, '1d': 0.2
            }
            
            weighted_vol = sum(volatility_multi.get(tf, 0) * tf_weights.get(tf, 0) for tf in tf_weights)
            weighted_liq = sum(liquidity_multi.get(tf, 0) * tf_weights.get(tf, 0) for tf in tf_weights)
            weighted_trend = sum(trend_multi.get(tf, 0) * tf_weights.get(tf, 0) for tf in tf_weights)
            
            print("-" * 40)
            print(f"{'Weighted':>6} {weighted_vol:>10.2f} {weighted_liq:>10.1f} {weighted_trend:>8.1f}")
            
        else:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢ Timeframe ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {test_symbol} ‡πÑ‡∏î‡πâ")
            
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Timeframe: {e}")

async def test_parallel_performance():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏ô"""
    print("\n‚ö° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏ô...")
    
    try:
        client = Client(config.BINANCE_API_KEY, config.BINANCE_API_SECRET)
        analyzer = CoinAnalyzer(client)
        
        test_symbols = ["BTCUSDT", "ETHUSDT", "BNBUSDT"]
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏ô
        print(f"üîÑ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå {len(test_symbols)} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏ô...")
        start_time = time.time()
        
        tasks = [analyzer.analyze_coin_multi_tf(symbol) for symbol in test_symbols]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        end_time = time.time()
        parallel_duration = end_time - start_time
        
        print(f"‚úÖ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏Ç‡∏ô‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÉ‡∏ô {parallel_duration:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö
        print(f"üîÑ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå {len(test_symbols)} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏ö‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö...")
        start_time = time.time()
        
        sequential_results = []
        for symbol in test_symbols:
            result = await analyzer.analyze_coin_multi_tf(symbol)
            sequential_results.append(result)
        
        end_time = time.time()
        sequential_duration = end_time - start_time
        
        print(f"‚úÖ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÉ‡∏ô {sequential_duration:.2f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
        speedup = sequential_duration / parallel_duration if parallel_duration > 0 else 0
        print(f"üöÄ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô: {speedup:.2f}x")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        print(f"\nüìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:")
        for i, symbol in enumerate(test_symbols):
            if i < len(results) and not isinstance(results[i], Exception):
                analysis = results[i]
                order_size = analysis['categories']['order_size']
                leverage = analysis['categories']['leverage']
                print(f"   {symbol}: {order_size} size, {leverage} leverage")
            else:
                print(f"   {symbol}: ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û: {e}")

async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Multi-Timeframe")
    print("=" * 60)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
    await test_multi_timeframe_analysis()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Timeframe
    await test_timeframe_comparison()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
    await test_parallel_performance()
    
    print("\n" + "=" * 60)
    print("üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Multi-Timeframe ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

if __name__ == "__main__":
    asyncio.run(main()) 