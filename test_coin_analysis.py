#!/usr/bin/env python3
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
"""

import asyncio
import json
from trading_bot import TradingBot
from coin_analysis import CoinAnalyzer
from binance.client import Client
import config

async def test_coin_analysis():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç"""
    print("ü™ô ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç...")
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á bot instance
        bot = TradingBot()
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        print("\nüìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...")
        analyses = await bot.analyze_coins()
        
        if analyses:
            print(f"‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {len(analyses)} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            for symbol, analysis in analyses.items():
                print(f"\nüîç {symbol}:")
                print(f"   ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {analysis['current_price']:.2f} USDT")
                print(f"   ‡∏Ç‡∏ô‡∏≤‡∏î Order: {analysis['categories']['order_size']}")
                print(f"   Leverage: {analysis['categories']['leverage']}")
                print(f"   Position Size Multiplier: {analysis['recommendations']['position_size_multiplier']}")
                print(f"   Recommended Leverage: {analysis['recommendations']['leverage']['recommended']}x")
                print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô: {analysis['metrics']['volatility']:.2f}%")
                print(f"   ‡∏™‡∏†‡∏≤‡∏û‡∏Ñ‡∏•‡πà‡∏≠‡∏á: {analysis['metrics']['liquidity_score']:.1f}/100")
                print(f"   ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {analysis['metrics']['volume_profile']['avg_volume']:,.0f}")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
                notes = analysis['recommendations']['notes']
                if notes:
                    print("   üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:")
                    for note in notes[:2]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 2 ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÅ‡∏£‡∏Å
                        print(f"      {note}")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÑ‡∏î‡πâ")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        print("\nüéØ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞...")
        test_symbol = "BTCUSDT"
        if test_symbol in config.TRADING_PAIRS:
            recommendation = await bot.get_coin_recommendations(test_symbol)
            if recommendation:
                print(f"‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå {test_symbol} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                print(f"   ‡∏Ç‡∏ô‡∏≤‡∏î Order: {recommendation['categories']['order_size']}")
                print(f"   Leverage: {recommendation['categories']['leverage']}")
            else:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå {test_symbol} ‡πÑ‡∏î‡πâ")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ
        print("\nüìã ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ...")
        if analyses:
            summary = bot.coin_analyzer.get_summary_report(analyses)
            print("‚úÖ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ:")
            print(summary)
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì position size
        print("\nüí∞ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì position size...")
        test_symbol = "ETHUSDT"
        if test_symbol in config.TRADING_PAIRS:
            try:
                # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                ticker = await bot.safe_api_call(bot.client.futures_symbol_ticker, symbol=test_symbol)
                current_price = float(ticker['price'])
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì position size
                quantity = await bot.calculate_position_size(test_symbol, current_price)
                if quantity:
                    print(f"‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì position size ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {test_symbol} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                    print(f"   ‡∏£‡∏≤‡∏Ñ‡∏≤: {current_price:.2f} USDT")
                    print(f"   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {quantity}")
                    print(f"   ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤: {quantity * current_price:.2f} USDT")
                else:
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì position size ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {test_symbol} ‡πÑ‡∏î‡πâ")
            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì position size: {e}")
        
        print("\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {e}")

async def test_individual_metrics():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß"""
    print("\nüî¨ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß...")
    
    try:
        client = Client(config.BINANCE_API_KEY, config.BINANCE_API_SECRET)
        analyzer = CoinAnalyzer(client)
        
        test_symbol = "BTCUSDT"
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î
        df = await analyzer.get_market_data(test_symbol)
        if not df.empty:
            print(f"‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {test_symbol} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
            volatility = analyzer.calculate_volatility(df)
            print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô: {volatility:.2f}%")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢
            volume_profile = analyzer.calculate_volume_profile(df)
            print(f"   ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {volume_profile['avg_volume']:,.0f}")
            print(f"   ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì: {volume_profile['volume_stability']:.3f}")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏†‡∏≤‡∏û‡∏Ñ‡∏•‡πà‡∏≠‡∏á
            liquidity_score = analyzer.calculate_liquidity_score(df)
            print(f"   ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏Ñ‡∏•‡πà‡∏≠‡∏á: {liquidity_score:.1f}/100")
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
            order_size_category = analyzer._determine_order_size_category(
                volatility, volume_profile, liquidity_score
            )
            leverage_category = analyzer._determine_leverage_category(
                volatility, volume_profile
            )
            
            print(f"   ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏ô‡∏≤‡∏î Order: {order_size_category}")
            print(f"   ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà Leverage: {leverage_category}")
            
        else:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {test_symbol} ‡πÑ‡∏î‡πâ")
            
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å: {e}")

def save_test_results(analyses):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    try:
        with open("test_results.json", "w", encoding="utf-8") as f:
            json.dump(analyses, f, indent=2, ensure_ascii=False)
        print("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå test_results.json ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ: {e}")

async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç")
    print("=" * 50)
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å
    await test_coin_analysis()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
    await test_individual_metrics()
    
    print("\n" + "=" * 50)
    print("üéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

if __name__ == "__main__":
    asyncio.run(main()) 