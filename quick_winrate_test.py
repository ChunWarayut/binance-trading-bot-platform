#!/usr/bin/env python3
"""
Quick Win Rate Test - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Win Rate ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß
"""

import asyncio
import sys
import logging
from datetime import datetime, timedelta
from backtest import BacktestEngine

# ‡∏õ‡∏¥‡∏î logging ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
logging.getLogger('urllib3').setLevel(logging.WARNING)
logging.getLogger('binance').setLevel(logging.WARNING)

async def quick_test_winrate(symbols=['BTCUSDT'], days=7, interval='1h'):
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö Win Rate ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß"""
    
    print("‚ö° QUICK WIN RATE TEST")
    print("=" * 40)
    print(f"üìä Symbols: {', '.join(symbols)}")
    print(f"üìÖ Period: {days} days")
    print(f"‚è∞ Interval: {interval}")
    print()
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    end_date = datetime.now()
    start_date = end_date - timedelta(days=days)
    
    results_summary = []
    
    for symbol in symbols:
        try:
            print(f"üß™ Testing {symbol}...")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á backtest engine
            engine = BacktestEngine(
                start_date.strftime('%Y-%m-%d'),
                end_date.strftime('%Y-%m-%d'),
                1000
            )
            
            # ‡∏£‡∏±‡∏ô backtest
            result = await engine.run_backtest(symbol, interval)
            
            if result and result.get('total_trades', 0) > 0:
                win_rate = result.get('win_rate_pct', 0)
                total_trades = result.get('total_trades', 0)
                final_balance = result.get('final_balance', 0)
                total_return = result.get('total_return_pct', 0)
                
                # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô Win Rate
                if win_rate >= 60:
                    rating = "üèÜ ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°"
                elif win_rate >= 55:
                    rating = "‚úÖ ‡∏î‡∏µ‡∏°‡∏≤‡∏Å"
                elif win_rate >= 50:
                    rating = "üëç ‡∏î‡∏µ"
                elif win_rate >= 45:
                    rating = "‚ö†Ô∏è ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
                else:
                    rating = "‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"
                
                results_summary.append({
                    'symbol': symbol,
                    'win_rate': win_rate,
                    'total_trades': total_trades,
                    'final_balance': final_balance,
                    'total_return': total_return,
                    'rating': rating
                })
                
                print(f"  üìà Win Rate: {win_rate:.1f}% {rating}")
                print(f"  üìä Trades: {total_trades}")
                print(f"  üí∞ Return: {total_return:.2f}%")
                print()
                
            else:
                print(f"  ‚ö†Ô∏è No trades for {symbol}")
                print()
                
        except Exception as e:
            print(f"  ‚ùå Error testing {symbol}: {e}")
            print()
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if results_summary:
        print("üìã SUMMARY RESULTS")
        print("=" * 40)
        
        total_win_rate = sum(r['win_rate'] for r in results_summary) / len(results_summary)
        total_trades_all = sum(r['total_trades'] for r in results_summary)
        avg_return = sum(r['total_return'] for r in results_summary) / len(results_summary)
        
        print(f"üìä Average Win Rate: {total_win_rate:.1f}%")
        print(f"üìà Total Trades: {total_trades_all}")
        print(f"üí∞ Average Return: {avg_return:.2f}%")
        print()
        
        # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°
        if total_win_rate >= 55:
            print("üéâ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏î‡∏µ! Win Rate ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢")
            print("‚úÖ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ config ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ")
        else:
            gap = 55 - total_win_rate
            print(f"üìà ‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Win Rate ‡∏≠‡∏µ‡∏Å {gap:.1f}%")
            print("üîß ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ä‡πâ Win Rate Optimizer:")
            print("   python win_rate_optimizer.py")
        
        print()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞ symbol
        print("üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞ Symbol:")
        for result in results_summary:
            print(f"  ‚Ä¢ {result['symbol']}: {result['win_rate']:.1f}% ({result['total_trades']} trades) {result['rating']}")
    
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")
        print("üîß ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á parameters ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö")

async def main():
    """Main function"""
    print("‚ö° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö Win Rate ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß...")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏±‡∏ö 3 symbols ‡∏´‡∏•‡∏±‡∏Å
    symbols = ['BTCUSDT', 'ETHUSDT', 'BNBUSDT']
    
    try:
        await quick_test_winrate(symbols, days=7, interval='1h')
        
        print("\n" + "=" * 40)
        print("üöÄ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:")
        print("1. ‡∏´‡∏≤‡∏Å Win Rate ‡∏î‡∏µ (>55%) ‚Üí ‡∏£‡∏±‡∏ô full backtest")
        print("2. ‡∏´‡∏≤‡∏Å Win Rate ‡πÑ‡∏°‡πà‡∏î‡∏µ ‚Üí ‡πÉ‡∏ä‡πâ win_rate_optimizer.py")
        print("3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö paper trading")
        print("4. Deploy bot ‡∏à‡∏£‡∏¥‡∏á")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ event loop
    if sys.platform.startswith('win'):
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    asyncio.run(main()) 